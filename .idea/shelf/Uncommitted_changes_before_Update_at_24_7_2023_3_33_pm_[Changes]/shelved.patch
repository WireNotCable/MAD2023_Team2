Index: app/src/main/java/sg/edu/np/mad/pennywise/Stats.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sg.edu.np.mad.pennywise;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.ActionBarDrawerToggle;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\n\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Color;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.MenuItem;\r\n\r\nimport com.github.mikephil.charting.charts.BarChart;\r\nimport com.github.mikephil.charting.charts.PieChart;\r\nimport com.github.mikephil.charting.components.XAxis;\r\nimport com.github.mikephil.charting.components.YAxis;\r\nimport com.github.mikephil.charting.data.BarData;\r\nimport com.github.mikephil.charting.data.BarDataSet;\r\nimport com.github.mikephil.charting.data.BarEntry;\r\nimport com.github.mikephil.charting.data.PieData;\r\nimport com.github.mikephil.charting.data.PieDataSet;\r\nimport com.github.mikephil.charting.data.PieEntry;\r\nimport com.github.mikephil.charting.formatter.IndexAxisValueFormatter;\r\nimport com.github.mikephil.charting.utils.ColorTemplate;\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.firestore.CollectionReference;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.QuerySnapshot;\r\n\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class Stats extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener{\r\n    public static final String GLOBAL_PREFS = \"myPrefs\";\r\n    public static final String MY_EMAIL = \"MyEmail\";\r\n\r\n    public String MY_UID = \"MyUID\";\r\n    SharedPreferences sharedPreferences;\r\n\r\n    BarChart monthChart;\r\n    PieChart pieChart;\r\n    ArrayList monthlySpendArrayList;\r\n\r\n    ArrayList<PieEntry> CategoryData;\r\n    DrawerLayout drawerLayout;\r\n    NavigationView navigationView;\r\n    Toolbar toolbar;\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_stats);\r\n\r\n        monthChart = findViewById(R.id.monthly_bar);\r\n        pieChart = findViewById(R.id.category_piechart);\r\n\r\n        drawerLayout = findViewById(R.id.drawer_layout);\r\n        navigationView = findViewById(R.id.nav_view);\r\n        toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n\r\n        navigationView.bringToFront();\r\n        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawerLayout, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);\r\n        drawerLayout.addDrawerListener(toggle);\r\n        toggle.syncState();\r\n\r\n        navigationView.setNavigationItemSelectedListener(this);\r\n        navigationView.setCheckedItem(R.id.nav_home);\r\n\r\n        // Initialize SharedPreferences\r\n        sharedPreferences = getSharedPreferences(GLOBAL_PREFS, MODE_PRIVATE);\r\n        String uid = sharedPreferences.getString(MY_UID, \"\");\r\n\r\n        getMonthData(uid);\r\n\r\n        getCurrentMonthData(uid);\r\n    }\r\n    private void getCurrentMonthData(String uid){\r\n        FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n        CollectionReference transactionRef = db.collection(\"users\").document(uid).collection(\"alltransaction\");\r\n        transactionRef.get().addOnCompleteListener(task -> {\r\n            if (task.isSuccessful()) {\r\n                QuerySnapshot querySnapshot = task.getResult();\r\n                List<DocumentSnapshot> documents = querySnapshot.getDocuments();\r\n\r\n\r\n                // Create a nested HashMap to store categories and their amounts\r\n                HashMap<String, Double> categoryMap = new HashMap<>();\r\n                double monthSpend = 0.0;\r\n\r\n                for (DocumentSnapshot document : documents) {\r\n                    Map<String, Object> data = document.getData();\r\n                    double amount = (double) data.get(\"amount\");\r\n                    String type = (String) data.get(\"type\");\r\n                    String CTitle = (String) data.get(\"title\");\r\n                    String dateString = (String) data.get(\"date\");\r\n\r\n                    SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MMM-yyyy\");\r\n\r\n                    try {\r\n                        Date date = sdf.parse(dateString);\r\n                        Calendar current = Calendar.getInstance();\r\n                        if (type.equals(\"expense\") && date.getMonth() == current.get(Calendar.MONTH)) {\r\n                            if (!categoryMap.containsKey(CTitle)) {\r\n                                categoryMap.put(CTitle, amount);\r\n                            } else {\r\n                                double currentAmount = categoryMap.get(CTitle);\r\n                                categoryMap.put(CTitle, currentAmount + amount);\r\n                            }\r\n                            monthSpend += amount;\r\n                        }\r\n                    } catch (ParseException e) {\r\n                        e.printStackTrace(); // Handle or log the exception as needed\r\n                    }\r\n                }\r\n\r\n                // Once the data is retrieved, update the chart\r\n                CategoryData = new ArrayList();\r\n                for (String category : categoryMap.keySet()) {\r\n                    double totalAmount = categoryMap.get(category);\r\n                    Log.v(\"HEUWHE\",category);\r\n//                    CategoryData.add(new PieEntry((float)(totalAmount/monthSpend * 100),category));\r\n                    CategoryData.add(new PieEntry((float)(totalAmount/monthSpend * 100), category));\r\n\r\n                    Log.v(\"HEUWHE\",String.valueOf(totalAmount +\"/\" +monthSpend));\r\n                    Log.v(\"HEUWHE\",String.valueOf((float)(totalAmount/monthSpend * 360)));\r\n\r\n                }\r\n                // Once the data is retrieved, update the chart\r\n                updatePieChart();\r\n            } else {\r\n                Log.e(\"TotalExpense\", \"Error getting documents: \", task.getException());\r\n            }\r\n        });\r\n    }\r\n    private void getMonthData(String uid) {\r\n        FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n        CollectionReference transactionRef = db.collection(\"users\").document(uid).collection(\"alltransaction\");\r\n        transactionRef.get().addOnCompleteListener(task -> {\r\n            if (task.isSuccessful()) {\r\n                QuerySnapshot querySnapshot = task.getResult();\r\n                List<DocumentSnapshot> documents = querySnapshot.getDocuments();\r\n\r\n                monthlySpendArrayList = new ArrayList();\r\n\r\n                for (int i = 0; i < 12; i++) {\r\n                    double monthSpend = 0.0;\r\n\r\n                    for (DocumentSnapshot document : documents) {\r\n                        Map<String, Object> data = document.getData();\r\n                        double amount = (double) data.get(\"amount\");\r\n                        String type = (String) data.get(\"type\");\r\n                        String dateString = (String) data.get(\"date\");\r\n                        SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MMM-yyyy\");\r\n\r\n                        try {\r\n                            Date date = sdf.parse(dateString);\r\n                            Log.v(\"Monthas\", String.valueOf(dateString));\r\n                            // Use i + 1 since Date's getMonth() returns months starting from 0\r\n\r\n                            if (type.equals(\"expense\") && (date.getMonth() + 1) == i + 1) {\r\n\r\n                                monthSpend += amount;\r\n                            }\r\n                        } catch (ParseException e) {\r\n\r\n                            e.printStackTrace(); // Handle or log the exception as needed\r\n                        }\r\n                    }\r\n                    if(monthSpend!=0){\r\n\r\n                    }\r\n                    monthlySpendArrayList.add(new BarEntry(i,(float) monthSpend));\r\n                }\r\n\r\n\r\n\r\n            } else {\r\n                Log.e(\"TotalExpense\", \"Error getting documents: \", task.getException());\r\n            }\r\n            // Once the data is retrieved, update the chart\r\n            updateChart();\r\n        });\r\n    }\r\n\r\n    private void updateChart() {\r\n        BarDataSet monthDataSet = new BarDataSet(monthlySpendArrayList, \"Months\");\r\n        BarData barData = new BarData(monthDataSet);\r\n        monthChart.setData(barData);\r\n\r\n        // Label the X-axis with your desired labels\r\n        String[] months = new String[]{\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\r\n        XAxis xAxis = monthChart.getXAxis();\r\n        xAxis.setValueFormatter(new IndexAxisValueFormatter(months));\r\n        // Set the position of the X-axis labels to \"BOTTOM\"\r\n        xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);\r\n        // Customize the Y-axis appearance\r\n        YAxis leftYAxis = monthChart.getAxisLeft();\r\n        leftYAxis.setDrawGridLines(false); // Remove the horizontal grid lines\r\n\r\n        //Design the chart\r\n        monthDataSet.setValueTextColor(Color.BLUE);\r\n        monthDataSet.setValueTextSize(15f);\r\n        monthChart.getDescription().setEnabled(false);\r\n        monthChart.animateXY(1000, 1000);\r\n        monthDataSet.setColors(ColorTemplate.COLORFUL_COLORS);\r\n        // Refresh the chart\r\n        monthChart.invalidate();\r\n\r\n\r\n\r\n\r\n    }\r\n    private void updatePieChart() {\r\n\r\n        //Set Data\r\n        PieDataSet pieDataSet = new PieDataSet(CategoryData, \"Category\");\r\n        if (CategoryData.isEmpty()) {\r\n            CategoryData.add(new PieEntry(100, \"No Data\"));\r\n        }\r\n\r\n        PieData pieData = new PieData(pieDataSet);\r\n        pieChart.setData(pieData);\r\n\r\n        //Design\r\n        pieDataSet.setColors(ColorTemplate.MATERIAL_COLORS);\r\n        pieChart.getDescription().setEnabled(false);\r\n        pieChart.animateY(1000);\r\n        pieChart.invalidate();\r\n    }\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        // Set the selected item every time the activity is brought to the foreground\r\n        navigationView.setCheckedItem(R.id.nav_stats);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (drawerLayout.isDrawerOpen(GravityCompat.START)) {\r\n            drawerLayout.closeDrawer(GravityCompat.START);\r\n        } else {\r\n            super.onBackPressed();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean onNavigationItemSelected(@NonNull MenuItem item) {\r\n        if (item.getItemId() == R.id.nav_add_transactions) {\r\n            Intent intent = new Intent(Stats.this, AddTransaction.class);\r\n            startActivity(intent);\r\n        } else if (item.getItemId() == R.id.nav_view_transactions) {\r\n            Intent intent = new Intent(Stats.this, ViewAllTransactions.class);\r\n            startActivity(intent);\r\n        } else if (item.getItemId() == R.id.nav_card) {\r\n            Intent intent = new Intent(Stats.this, ViewCard.class);\r\n            startActivity(intent);\r\n        } else if (item.getItemId() == R.id.nav_about) {\r\n            Intent intent = new Intent(Stats.this, AboutUs.class);\r\n            startActivity(intent);\r\n        } else if (item.getItemId() == R.id.nav_currency) {\r\n            Intent intent = new Intent(Stats.this, Currency.class);\r\n            startActivity(intent);\r\n        } else if (item.getItemId() == R.id.nav_home) {\r\n            Intent intent = new Intent(Stats.this, MainActivity.class);\r\n            startActivity(intent);\r\n        } else if (item.getItemId() == R.id.nav_transfer) {\r\n            Intent intent = new Intent(Stats.this, Transfer.class);\r\n            startActivity(intent);\r\n        }  else if (item.getItemId() == R.id.nav_set_limit){\r\n            Intent intent = new Intent(Stats.this, SetLimit.class);\r\n            startActivity(intent);\r\n        }\r\n        else if (item.getItemId() == R.id.nav_profile){\r\n            Intent intent = new Intent(Stats.this, Profile.class);\r\n            startActivity(intent);\r\n        }\r\n        else if(item.getItemId() == R.id.nav_goal){\r\n            Intent intent = new Intent(Stats.this, Profile.class);\r\n            startActivity(intent);\r\n        }\r\n        else if (item.getItemId() == R.id.nav_cryptoTracker){\r\n            Intent intent = new Intent(Stats.this, CryptoTracker.class);\r\n            startActivity(intent);\r\n        }\r\n\r\n        else if (item.getItemId() == R.id.nav_map){\r\n            Intent intent = new Intent(Stats.this, Maps.class);\r\n            startActivity(intent);\r\n        }\r\n\r\n         else if (item.getItemId() == R.id.nav_logout) {\r\n            sharedPreferences = getSharedPreferences(GLOBAL_PREFS, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedPreferences.edit();\r\n            editor.clear();\r\n            FirebaseAuth.getInstance().signOut();\r\n            Intent intent = new Intent(Stats.this, Login.class);\r\n            startActivity(intent);\r\n        }\r\n        drawerLayout.closeDrawer(GravityCompat.START);\r\n        return true;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sg/edu/np/mad/pennywise/Stats.java b/app/src/main/java/sg/edu/np/mad/pennywise/Stats.java
--- a/app/src/main/java/sg/edu/np/mad/pennywise/Stats.java	(revision 1018b4494d9c872954b0f969e2e40fd44efb9c5f)
+++ b/app/src/main/java/sg/edu/np/mad/pennywise/Stats.java	(date 1690169251071)
@@ -227,6 +227,7 @@
 
     }
     private void updatePieChart() {
+//        Log.v("LENGTH",String.valueOf(CategoryData.size()));
 
         //Set Data
         PieDataSet pieDataSet = new PieDataSet(CategoryData, "Category");
